#!/usr/bin/env python

# stand-alone implementation of the master regulator analysis used in TieDIE. 

import sys, os

from optparse import OptionParser
parser = OptionParser()
# data specific for patient-specific networks here
parser.add_option("-n","--network",dest="network",action="store",
		default=None,help=".sif network file for the curated pathway to search."
		" Each line should have format "
		"'<source> <(-a>,-a|,-t>,-t|,-component>)> <target>'")
parser.add_option("--d_expr",dest="d_expr",action="store",default=None,
		type="string",help="List of significantly differentially expressed "
		"genes, along with log-FC or FC values (i.e. by edgeR for RNA-Seq or "
		"SAM for microarray data. Generated by a sample-dichotomy of interest")
parser.add_option("-p","--permutations",dest="permutations",action="store",default=1000, help=
		"Number of permutations to use when generating the empirical p-value")
parser.add_option("-m","--min_hub",dest="min_hub",action="store",default=10, help=
		"minimum number of downstream targets to be considered a 'hub'")
(opts, args) = parser.parse_args()
	
sys.path.append(os.path.dirname(sys.argv[0])+'/../lib')
from master_reg import ActivityScores
from tiedie_util import *

network = parseNet(opts.network)
network_nodes = getNetworkNodes(network)
sys.stderr.write("Parsing Network File..\n")
tfs_heats = ActivityScores.findRegulatorsReport(network, opts.d_expr, min_hub=opts.min_hub, nperms=opts.permutations)

print "\t".join(["Regulator", "Pval", "BY Adjusted Pval", "Heat Fraction"])
for node in tfs_heats:
	print node+"\t"+"\t".join([str(v) for v in tfs_heats[node]])

